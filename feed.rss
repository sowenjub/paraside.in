<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>üèù Living in Paraside</title><description>Paraside [p…õ.…π…ô.sa…™d] - A mind archipelago where dreams come true</description><link>https://paraside.in</link><language>en</language><lastBuildDate>Tue, 25 Aug 2020 23:31:55 +0200</lastBuildDate><pubDate>Tue, 25 Aug 2020 23:31:55 +0200</pubDate><ttl>250</ttl><atom:link href="https://paraside.in/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://paraside.in/design+code/default-fixtures</guid><title>Multiple YAML defaults in Rails fixtures</title><description>You can have more than one default set of common attributes values for your fixtures</description><link>https://paraside.in/design+code/default-fixtures</link><pubDate>Tue, 25 Aug 2020 18:05:00 +0200</pubDate><content:encoded><![CDATA[<p>You know that you can use <a href="https://api.rubyonrails.org/v3.1/classes/ActiveRecord/Fixtures.html">YAML defaults in your fixtures</a> to extract common attributes values and make your fixtures more readable.</p><pre><code><div class="highlight"><span></span><span class="nt">DEFAULTS</span><span class="p">:</span> <span class="nl">&amp;DEFAULTS</span>
  <span class="nt">created_on</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">&lt;%= 3.weeks.ago.to_s(:db) %&gt;</span>

<span class="nt">first</span><span class="p">:</span>
  <span class="nt">name</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">Smurf</span>
  <span class="nt">&lt;&lt;</span><span class="p">:</span> <span class="nv">*DEFAULTS</span>

<span class="nt">second</span><span class="p">:</span>
  <span class="nt">name</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">Fraggle</span>
  <span class="nt">&lt;&lt;</span><span class="p">:</span> <span class="nv">*DEFAULTS</span>
</div></code></pre><p>What if you want to use more than one set of defaults?</p><h1>The old way - DEFAULTS</h1><p>The Rails example is a bit confusing because it uses "DEFAULTS" for both the label and the anchor/alias, but here's how to handle multiple defaults:</p><pre><code><div class="highlight"><span></span><span class="nt">DEFAULTS</span><span class="p">:</span> <span class="nl">&amp;decisions</span>
  <span class="nt">icon</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">üß†</span>
  <span class="nt">name</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">Decisions</span>

<span class="nt">DEFAULTS</span><span class="p">:</span> <span class="nl">&amp;help</span>
  <span class="nt">icon</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">üëã</span>
  <span class="nt">name</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">Help</span>

<span class="nt">founders_decisions</span><span class="p">:</span>
  <span class="nt">team</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">founders</span>
  <span class="nt">&lt;&lt;</span><span class="p">:</span> <span class="nv">*decisions</span>

<span class="nt">founders_help_requests</span><span class="p">:</span>
  <span class="nt">team</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">founders</span>
  <span class="nt">&lt;&lt;</span><span class="p">:</span> <span class="nv">*help</span>
</div></code></pre><p>To understand how this works, you need to know two things.</p><ul><li>The <a href="https://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html#class-ActiveRecord::FixtureSet-label-Support+for+YAML+defaults">Rails docs</a> tell us that it doesn't matter how many "DEFAULTS" label we have: they won't overwrite themselves even though they use the same label.</li></ul><blockquote><p>Any fixture labeled ‚ÄúDEFAULTS‚Äù is safely ignored</p></blockquote><ul><li>The <a href="https://yaml.org/spec/1.2/spec.html">YAML spec</a> explains how aliasing works</li></ul><blockquote><p>Repeated nodes (objects) are first identified by an anchor (marked with the ampersand - ‚Äú&amp;‚Äù), and are then aliased (referenced with an asterisk - ‚Äú*‚Äù) thereafter.</p></blockquote><h1>Edge Rails way - fixture:ignore</h1><p>There's another way to do that on <a href="https://edgeapi.rubyonrails.org/classes/ActiveRecord/FixtureSet.html#class-ActiveRecord::FixtureSet-label-Support+for+YAML+defaults">Edge Rails</a>. You can specify fixtures that should be ignored and that you can therefore use as defaults.</p><p>We can rewrite the example above like this:</p><pre><code><div class="highlight"><span></span><span class="nt">_fixture</span><span class="p">:</span>
  <span class="nt">ignore</span><span class="p">:</span>
    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">decisions</span>
    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">help</span>

<span class="nt">decisions</span><span class="p">:</span> <span class="nl">&amp;decisions</span>
  <span class="nt">icon</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">üß†</span>
  <span class="nt">name</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">Decisions</span>

<span class="nt">help</span><span class="p">:</span> <span class="nl">&amp;help</span>
  <span class="nt">icon</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">üëã</span>
  <span class="nt">name</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">Help</span>

<span class="nt">founders_decisions</span><span class="p">:</span>
  <span class="nt">team</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">founders</span>
  <span class="nt">&lt;&lt;</span><span class="p">:</span> <span class="nv">*decisions</span>

<span class="nt">founders_help_requests</span><span class="p">:</span>
  <span class="nt">team</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">founders</span>
  <span class="nt">&lt;&lt;</span><span class="p">:</span> <span class="nv">*help</span>
</div></code></pre><h1>Which one should I use?</h1><p>If you're using the Rails 6.0.3.2 or below, you don't have a choice anyway. But even then, while the edge option is interesting because the anchor/alias mirrors the label, I'll stick with the "old way" for two reasons:</p><ol><li>it's less code (you don't have to write the _fixture block)</li><li>the DEFAULTS label is easy to spot and explicit. You could use <code>DECISION_DEFAULTS: &amp;decisions</code> instead of <code>decisions: &amp;decisions</code> but the label isn't really useful and, again, you're writing more code than if it's just <code>DEFAULTS: &amp;decisions</code></li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://paraside.in/design+code/publish+tailwindcss</guid><title>Power your Publish (Swift) static site with Tailwind CSS</title><description>Learn how to create your own Publish theme and style it using Tailwind CSS.</description><link>https://paraside.in/design+code/publish+tailwindcss</link><pubDate>Thu, 13 Aug 2020 15:42:00 +0200</pubDate><content:encoded><![CDATA[<p>Within minutes, you will be able to deploy a static site/blog (with <a href="https://www.notion.so/sowenjub/Power-your-Publish-Swift-static-site-with-TailwindCSS-58cac4f32b194a949b8c6a5050e6c3bd#feea835bb98c48429bd916820f17c355">Publish</a>) that you can style easily (with <a href="https://tailwindcss.com">TailwindCSS</a>).</p><p>If you don't want to create your own theme, you can save some time and use my <a href="../casperish">Casperish theme</a>, a port of <a href="https://ghost.org">Ghost</a>'s Casper theme using Tailwind CSS.</p><h1>Install Publish</h1><p><a href="https://github.com/JohnSundell/Publish">Publish</a> is a static site generator built specifically for Swift developers, created by John Sundell (<a href="https://twitter.com/johnsundell">@johnsundell</a>) and powering his very own <a href="http://swiftbysundell.com/">swiftbysundell.com</a>.</p><p>You need to have installed Xcode and its Command Line Tools. It's preferable to have a basic understanding of how it works (build, run, understand crash logs).</p><p>For now, open your terminal and follow the <a href="https://github.com/JohnSundell/Publish#quick-start">README</a>.</p><pre><code><div class="highlight"><span></span>git clone https://github.com/JohnSundell/Publish.git
<span class="nb">cd</span> Publish
make
</div></code></pre><h1>Create your website</h1><p>Publish is just the engine, it's now time to create your website.</p><p>Let's get out of /Publish and create your website source next to it. We'll call it <code>MyWebsite</code>.</p><pre><code><div class="highlight"><span></span><span class="nb">cd</span> ..
mkdir MyWebsite
<span class="nb">cd</span> MyWebsite
publish new
</div></code></pre><p>And since we're impatient, let's see what it looks like at this point.</p><pre><code><div class="highlight"><span></span><span class="n">publish</span> <span class="n">run</span>
</div></code></pre><p>This should output something like this</p><pre><code><div class="highlight"><span></span>Fetching https://github.com/johnsundell/publish.git
‚Ä¶
‚Ä¶
‚Ä¶
Publishing MyWebsite <span class="o">(</span><span class="m">6</span> steps<span class="o">)</span>
<span class="o">[</span><span class="m">1</span>/6<span class="o">]</span> Copy <span class="s1">&#39;Resources&#39;</span> files
<span class="o">[</span><span class="m">2</span>/6<span class="o">]</span> Add Markdown files from <span class="s1">&#39;Content&#39;</span> folder
<span class="o">[</span><span class="m">3</span>/6<span class="o">]</span> Sort items
<span class="o">[</span><span class="m">4</span>/6<span class="o">]</span> Generate HTML
<span class="o">[</span><span class="m">5</span>/6<span class="o">]</span> Generate RSS feed
<span class="o">[</span><span class="m">6</span>/6<span class="o">]</span> Generate site map
‚úÖ Successfully published MyWebsite
üåç Starting web server at http://localhost:8000

Press ENTER to stop the server and <span class="nb">exit</span>
</div></code></pre><p>Open <a href="http://localhost:8000/">http://localhost:8000</a> in your browser of choice (Safari here) and it should look like this:</p><img src="https://paraside.in/images/3/Screenshot_2020-08-02_at_14.52.43.png" alt="/images/3/Screenshot<em>2020-08-02</em>at_14.52.43.png"/><p>or in dark mode:</p><img src="https://paraside.in/images/3/Screenshot_2020-08-01_at_23.18.49.png" alt="/images/3/Screenshot<em>2020-08-01</em>at_23.18.49.png"/><h2>Time to launch Xcode</h2><p>We've been lazy alright, it's time to open Xcode and dive into some code.</p><p>From <code>/Publish/MyWebsite</code> run</p><pre><code><div class="highlight"><span></span>open Package.swift
</div></code></pre><p>It will look like this:</p><img src="https://paraside.in/images/3/Screenshot_2020-08-01_at_23.40.21.png" alt="/images/3/Screenshot<em>2020-08-01</em>at_23.40.21.png"/><p>A couple things to notice:</p><ul><li>You can see at the top of the screen that the active scheme is "My Mac". This is important because you won't be able to build/run on devices or simulators</li><li><code>/Sources/MyWebsite/main.swift</code> is were you can configure your app</li><li>You won't have the <code>package.json</code> or <code>yarn.lock</code>files at this point</li><li><code>/Content</code> contains the markdown content we saw when we opened the site (ex: "Welcome to MyWebsite")</li></ul><h2>Pause for coffee and think about your future</h2><p>From now on, before your refresh your browser to see the result of any change you made to your configuration or content, don't forget to rebuild your site in Xcode using ‚åò+R.</p><h1>Getting ready for TailwindCSS with a new Plot theme</h1><p>To build the website from the Content folder, Publish used its default theme called Foundation which is two parts:</p><ul><li><a href="https://github.com/JohnSundell/Publish/blob/master/Sources/Publish/API/Theme%2BFoundation.swift">Theme+Foundation.swift</a> which adopts the <a href="https://github.com/JohnSundell/Publish/blob/master/Sources/Publish/API/HTMLFactory.swift">HTMLFactory</a> protocol in order to <em>create HTML for a site's various locations using the Plot DSL</em>. Basically, it defines the HTML markup of each pages (index, article, page, tags index, tag page) ‚áí <em>we'll want to have access to this in some way to inject our TailwindCSS classes.</em></li><li><a href="https://github.com/JohnSundell/Publish/blob/master/Resources/FoundationTheme/styles.css">styles.css</a> which is the CSS stylesheet for that theme ‚áí <em>we'll want to change that with the ones generated by TailwindCSS</em>.</li></ul><p>As you may have guessed, we need to build our own theme.</p><h2>What do we need to do?</h2><p>Let's start with the end and work our way up.</p><p>We will tell Publish to use our own theme, so open <code>main.swift</code> and change the last line (should be line 25).</p><pre><code><div class="highlight"><span></span><span class="c1">// main.swift</span>

<span class="c1">// From</span>
<span class="k">try</span> <span class="n">MyWebsite</span><span class="p">().</span><span class="n">publish</span><span class="p">(</span><span class="n">withTheme</span><span class="p">:</span> <span class="p">.</span><span class="n">foundation</span><span class="p">)</span>
<span class="c1">// to</span>
<span class="k">try</span> <span class="n">MyWebsite</span><span class="p">().</span><span class="n">publish</span><span class="p">(</span><span class="n">withTheme</span><span class="p">:</span> <span class="p">.</span><span class="n">myTheme</span><span class="p">)</span>
</div></code></pre><p>Alright. Except this won't work of course, so don't try to build or run right now.</p><p>Now we need to define <code>myTheme</code> somewhere. We'll just create a new theme file in the Sources, next to <code>/Sources/MyWebsite/main.swift</code>.</p><p>Let's call it <code>Theme+MyTheme.swift</code> (from Xcode, right click on the <code>Sources/MyWebsite</code> folder and "New file").</p><p>But what should we put in there? The <a href="https://github.com/JohnSundell/Publish#building-an-html-theme">Publish README</a> explains how to build a custom theme. Again, we'll write things as they should be in the end and work our way up.</p><p>So we want to end up with something like this:</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>
<span class="kd">import</span> <span class="nc">Plot</span>
<span class="kd">import</span> <span class="nc">Publish</span>

<span class="kd">extension</span> <span class="nc">Theme</span> <span class="k">where</span> <span class="n">Site</span> <span class="p">==</span> <span class="n">MyWebsite</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">myTheme</span><span class="p">:</span> <span class="kc">Self</span> <span class="p">{</span>
        <span class="n">Theme</span><span class="p">(</span>
            <span class="n">htmlFactory</span><span class="p">:</span> <span class="n">MyThemeHTMLFactory</span><span class="p">&lt;</span><span class="n">MyWebsite</span><span class="p">&gt;(),</span>
            <span class="n">resourcePaths</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;Resources/MyTheme/styles.css&quot;</span><span class="p">]</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>What did we add there that doesn't exist already? Two things:</p><ul><li>MyThemeHTMLFactory</li><li>"Resources/MyTheme/styles.css"</li></ul><p>Looks familiar? This is the same setup I mentioned above when I introduced the Foundation theme.</p><p>If you open the <code>Theme+Foundation.swift</code> file (you can find it in Xcode under "Swift Package Dependencies" by opening the Publish package and going down to <code>/Publish/Sources/Publish/API</code>), you will</p><h1>MyThemeHTMLFactory: Our own HTML Factory</h1><p>We want to build a custom theme, so let's take inspiration from the free one we're given.</p><p>In Xcode, under "Swift Package Dependencies" you will find the Publish package, and inside of it is <code>Publish/Sources/Publish/API/Theme+Foundation.swift</code>.</p><p>A few lines below the <code>public extension Theme</code> declaration that we don't need since we just defined our own, you will find the foundation factory that we will use as a starting point.</p><p>We need to do 3 things:</p><ol><li>Copy the rest of the file, which includes one struct and one extension</li></ol><pre><code><div class="highlight"><span></span><span class="kd">private</span> <span class="kd">struct</span> <span class="nc">FoundationHTMLFactory</span><span class="p">&lt;</span><span class="n">Site</span><span class="p">:</span> <span class="n">Website</span><span class="p">&gt;:</span> <span class="n">HTMLFactory</span> <span class="p">{</span>
  <span class="err">‚Ä¶</span>
<span class="p">}</span>

<span class="kd">private</span> <span class="kd">extension</span> <span class="nc">Node</span> <span class="k">where</span> <span class="n">Context</span> <span class="p">==</span> <span class="n">HTML</span><span class="p">.</span><span class="n">BodyContext</span> <span class="p">{</span>
  <span class="err">‚Ä¶</span>
<span class="p">}</span>
</div></code></pre><ol><li>Paste it in our <code>Theme+MyTheme.swift</code>, below our <code>extension Theme where Site == MyWebsite {}</code> declaration.</li><li>Change <code>FoundationHTMLFactory</code> to <code>MyThemeHTMLFactory</code></li></ol><p>So to be clear, <code>Theme+MyTheme.swift</code> should look like this</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>
<span class="kd">import</span> <span class="nc">Plot</span>
<span class="kd">import</span> <span class="nc">Publish</span>

<span class="kd">extension</span> <span class="nc">Theme</span> <span class="k">where</span> <span class="n">Site</span> <span class="p">==</span> <span class="n">MyWebsite</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">myTheme</span><span class="p">:</span> <span class="kc">Self</span> <span class="p">{</span>
        <span class="n">Theme</span><span class="p">(</span>
            <span class="n">htmlFactory</span><span class="p">:</span> <span class="n">MyThemeHTMLFactory</span><span class="p">&lt;</span><span class="n">MyWebsite</span><span class="p">&gt;(),</span>
            <span class="n">resourcePaths</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;Resources/MyTheme/styles.css&quot;</span><span class="p">]</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">private</span> <span class="kd">struct</span> <span class="nc">MyThemeHTMLFactory</span><span class="p">&lt;</span><span class="n">Site</span><span class="p">:</span> <span class="n">Website</span><span class="p">&gt;:</span> <span class="n">HTMLFactory</span> <span class="p">{</span>
        <span class="c1">// What&#39;s inside didn&#39;t change</span>
<span class="p">}</span>

<span class="kd">private</span> <span class="kd">extension</span> <span class="nc">Node</span> <span class="k">where</span> <span class="n">Context</span> <span class="p">==</span> <span class="n">HTML</span><span class="p">.</span><span class="n">BodyContext</span> <span class="p">{</span>
        <span class="c1">// What&#39;s inside didn&#39;t change</span>
<span class="p">}</span>
</div></code></pre><p>OK!</p><p>There's one last thing we need: "Resources/MyTheme/styles.css"</p><h1>Let's add TailwindCSS!</h1><p>Let's add Tailwind by following the documentation <a href="https://tailwindcss.com/docs/installation">https://tailwindcss.com/docs/installation</a>.</p><p>We will also add the typography plugin since we're dealing with Markdown, and this plugin was specifically created to <em>add beautiful typographic defaults to any vanilla HTML you don't control</em>.</p><p>From <code>/MyWebsite</code>, open your terminal and run:</p><pre><code><div class="highlight"><span></span>yarn add tailwindcss
yarn add @tailwindcss/typography
</div></code></pre><p>We'll now add our theme stylesheet in <code>Resources</code></p><pre><code><div class="highlight"><span></span><span class="nb">cd</span> Resources
mkdir MyTheme
touch theme.css
</div></code></pre><p>Open <code>theme.css</code> in Xcode, and add those lines:</p><pre><code><div class="highlight"><span></span><span class="p">@</span><span class="k">import</span> <span class="s2">&quot;tailwindcss/base&quot;</span><span class="p">;</span>

<span class="p">@</span><span class="k">import</span> <span class="s2">&quot;tailwindcss/components&quot;</span><span class="p">;</span>

<span class="p">@</span><span class="k">import</span> <span class="s2">&quot;tailwindcss/utilities&quot;</span><span class="p">;</span>
</div></code></pre><p>We need to create a config file for TailwindCSS since we want the typography plugin, so we'll create a config file in <code>/Resources/MyTheme</code> as well.</p><pre><code><div class="highlight"><span></span>npx tailwindcss init
</div></code></pre><p>Open the <code>tailwind.config.js</code> file it created in Xcode and add the typography plugin.</p><pre><code><div class="highlight"><span></span><span class="n">module</span><span class="p">.</span><span class="n">exports</span> <span class="p">=</span> <span class="p">{</span>
  <span class="n">purge</span><span class="p">:</span> <span class="p">[],</span>
  <span class="n">theme</span><span class="p">:</span> <span class="p">{</span>
    <span class="bp">extend</span><span class="p">:</span> <span class="p">{},</span>
  <span class="p">},</span>
  <span class="n">variants</span><span class="p">:</span> <span class="p">{},</span>
  <span class="n">plugins</span><span class="p">:</span> <span class="p">[</span><span class="n">require</span><span class="p">(</span><span class="err">&#39;</span><span class="p">@</span><span class="n">tailwindcss</span><span class="o">/</span><span class="n">typography</span><span class="err">&#39;</span><span class="p">)],</span>
<span class="p">}</span>
</div></code></pre><p>Now to give this a spin and make sure it works so far, let's use the tailwind cli (from within <code>/Resources/MyTheme</code>)</p><pre><code><div class="highlight"><span></span>npx tailwindcss build theme.css -o styles.css -c tailwind.config.js
</div></code></pre><p>TADA! We now have our .css file</p><p>At this point (or anytime you make a change), you can just run the package <code>Product &gt; Run</code> (or ‚åò+R) and refresh your page in the browser (assuming your server, launched with <code>publish run</code> is still running).</p><p>It should look like this.</p><img src="https://paraside.in/images/3/Screenshot_2020-08-02_at_22.52.48.png" alt="/images/3/Screenshot<em>2020-08-02</em>at_22.52.48.png"/><p>So, that's a step back for sure.</p><p>But now, you can ride like the wind and build your own theme using Tailwind!</p><h2>Getting started</h2><p>We already know it works since all styles were reset, but let's add a class to make sure it really does.</p><p>Open your <code>Theme+MyTheme.swift</code> file, locate <code>makeIndexHTML()</code> and change the header as explained below:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">makeIndexHTML</span><span class="p">(</span><span class="k">for</span> <span class="n">index</span><span class="p">:</span> <span class="n">Index</span><span class="p">,</span>
                       <span class="n">context</span><span class="p">:</span> <span class="n">PublishingContext</span><span class="p">&lt;</span><span class="n">Site</span><span class="p">&gt;)</span> <span class="kr">throws</span> <span class="p">-&gt;</span> <span class="n">HTML</span> <span class="p">{</span>
        <span class="n">HTML</span><span class="p">(</span>
            <span class="p">.</span><span class="n">lang</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">site</span><span class="p">.</span><span class="n">language</span><span class="p">),</span>
            <span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="k">for</span><span class="p">:</span> <span class="n">index</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">context</span><span class="p">.</span><span class="n">site</span><span class="p">),</span>
            <span class="p">.</span><span class="n">body</span><span class="p">(</span>
                <span class="p">.</span><span class="n">header</span><span class="p">(</span><span class="k">for</span><span class="p">:</span> <span class="n">context</span><span class="p">,</span> <span class="n">selectedSection</span><span class="p">:</span> <span class="kc">nil</span><span class="p">),</span>
                <span class="p">.</span><span class="n">wrapper</span><span class="p">(</span>
                    <span class="c1">// Turn this</span>
                    <span class="p">.</span><span class="n">h1</span><span class="p">(.</span><span class="n">text</span><span class="p">(</span><span class="n">index</span><span class="p">.</span><span class="n">title</span><span class="p">)),</span>
                    <span class="c1">// into this</span>
                    <span class="p">.</span><span class="n">h1</span><span class="p">(.</span><span class="n">text</span><span class="p">(</span><span class="n">index</span><span class="p">.</span><span class="n">title</span><span class="p">),</span> <span class="p">.</span><span class="kd">class</span><span class="p">(</span><span class="s">&quot;text-2xl font-semibold&quot;</span><span class="p">)),</span>
                    <span class="p">.</span><span class="n">p</span><span class="p">(</span>
                        <span class="p">.</span><span class="kd">class</span><span class="p">(</span><span class="s">&quot;description&quot;</span><span class="p">),</span>
                        <span class="p">.</span><span class="n">text</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">site</span><span class="p">.</span><span class="n">description</span><span class="p">)</span>
                    <span class="p">),</span>
                    <span class="p">.</span><span class="n">h2</span><span class="p">(</span><span class="s">&quot;Latest content&quot;</span><span class="p">),</span>
                    <span class="p">.</span><span class="n">itemList</span><span class="p">(</span>
                        <span class="k">for</span><span class="p">:</span> <span class="n">context</span><span class="p">.</span><span class="n">allItems</span><span class="p">(</span>
                            <span class="n">sortedBy</span><span class="p">:</span> <span class="err">\</span><span class="p">.</span><span class="n">date</span><span class="p">,</span>
                            <span class="n">order</span><span class="p">:</span> <span class="p">.</span><span class="n">descending</span>
                        <span class="p">),</span>
                        <span class="n">on</span><span class="p">:</span> <span class="n">context</span><span class="p">.</span><span class="n">site</span>
                    <span class="p">)</span>
                <span class="p">),</span>
                <span class="p">.</span><span class="n">footer</span><span class="p">(</span><span class="k">for</span><span class="p">:</span> <span class="n">context</span><span class="p">.</span><span class="n">site</span><span class="p">)</span>
            <span class="p">)</span>
        <span class="p">)</span>
    <span class="p">}</span>
</div></code></pre><p>Now rerun (‚åò+R), refresh your browser, and enjoy a bigger title!</p><img src="https://paraside.in/images/3/Screenshot_2020-08-02_at_22.58.05.png" alt="/images/3/Screenshot<em>2020-08-02</em>at_22.58.05.png"/><p>That's not much, but there rest is up to you, sky's the limit.</p><h1>Controlling styles.css File Size</h1><p>Right now we included all TailwindCSS styles in the <code>styles.css</code> file, so the file is 10 times bigger than it could be.</p><p>In order to shave off a few pounds, we'll setup purge in the <code>tailwind.config.js</code>file, which should end up looking like this.</p><p>It will only keep classes present in your theme file (assuming you did name it <code>Theme+MyTheme.swift</code> otherwise you need to adjust the content line).</p><pre><code><div class="highlight"><span></span><span class="n">module</span><span class="p">.</span><span class="n">exports</span> <span class="p">=</span> <span class="p">{</span>
  <span class="n">purge</span><span class="p">:</span> <span class="p">{</span>
    <span class="n">enabled</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="n">content</span><span class="p">:</span> <span class="p">[</span><span class="err">&#39;</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="n">Sources</span><span class="cm">/**/</span><span class="n">Theme</span><span class="o">*</span><span class="p">.</span><span class="n">swift</span><span class="err">&#39;</span><span class="p">],</span>
  <span class="p">},</span>
  <span class="n">theme</span><span class="p">:</span> <span class="p">{</span>
    <span class="bp">extend</span><span class="p">:</span> <span class="p">{},</span>
  <span class="p">},</span>
  <span class="n">variants</span><span class="p">:</span> <span class="p">{},</span>
  <span class="n">plugins</span><span class="p">:</span> <span class="p">[</span><span class="n">require</span><span class="p">(</span><span class="err">&#39;</span><span class="p">@</span><span class="n">tailwindcss</span><span class="o">/</span><span class="n">typography</span><span class="err">&#39;</span><span class="p">)],</span>
<span class="p">}</span>
</div></code></pre><p>Now we need to re-build the styles.css. Before you do it, check the number of lines in your current styles.css file so you can compare before/after the purge.</p><pre><code><div class="highlight"><span></span>npx tailwindcss build theme.css -o styles.css -c tailwind.config.js
</div></code></pre><p>And with this, we are done!</p><h1>Too much work?</h1><p>Don't worry, I got your back!</p><img src="https://paraside.in/images/3/Screenshot_2020-08-02_at_23.12.40.png" alt="/images/3/Screenshot<em>2020-08-02</em>at_23.12.40.png"/><p>If you want a website that looks like this, just checkout my article <a href="../casperish">Your Publish website with my Casperish theme in less than 5 min</a>, and then read <a href="../publish-on-github-pages">Deploy your Publish website for free on GitHub Pages</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://paraside.in/design+code/publish-on-github-pages</guid><title>Deploy your Publish website for free on GitHub Pages</title><description>How to host your Publish website on GitHub (works with a custom domain too)</description><link>https://paraside.in/design+code/publish-on-github-pages</link><pubDate>Thu, 13 Aug 2020 15:10:00 +0200</pubDate><content:encoded><![CDATA[<h1>üêô Create a new GitHub repository</h1><p>First things first, let's create a repository to host your website content.</p><p>We'll call it <code>mywebsite</code> , which means it will be accessible at <code>https://yourusername.github.io/mywebsite</code>.</p><p>Instead of <code>mywebsite</code>, if you use <code>[yourusername.github.io](http://yourusername.github.io)</code> it will be accessible at <code>https://yourusername.github.io</code>. See <a href="https://pages.github.com">https://pages.github.com</a> for more infos about that.</p><img src="https://paraside.in/images/4/Screenshot_2020-08-11_at_15.21.16.png" alt="/images/4/Screenshot<em>2020-08-11</em>at_15.21.16.png"/><h1>üéû Setup the Publish pipeline</h1><p>Open your <code>main.swift</code> file and add <code>deployedUsing: .gitHub("yourusername/mywebsite")</code> to your publish pipeline, which should look something like this:</p><pre><code><div class="highlight"><span></span><span class="k">try</span> <span class="n">MyWebsite</span><span class="p">().</span><span class="n">publish</span><span class="p">(</span>
     <span class="n">withTheme</span><span class="p">:</span> <span class="p">.</span><span class="n">casperish</span><span class="p">,</span>
     <span class="n">deployedUsing</span><span class="p">:</span> <span class="p">.</span><span class="n">gitHub</span><span class="p">(</span><span class="s">&quot;sowenjub/mywebsite&quot;</span><span class="p">),</span>
     <span class="n">additionalSteps</span><span class="p">:</span> <span class="p">[</span>
         <span class="p">.</span><span class="n">installPlugin</span><span class="p">(.</span><span class="n">readingTime</span><span class="p">()),</span>
         <span class="p">.</span><span class="n">installPlugin</span><span class="p">(.</span><span class="n">pygments</span><span class="p">()),</span>
     <span class="p">],</span>
     <span class="n">plugins</span><span class="p">:</span> <span class="p">[.</span><span class="n">pygments</span><span class="p">()]</span>
 <span class="p">)</span>
</div></code></pre><p>Now run your site in Xcode (Product &gt; Run command or ‚åò+R), then open your terminal and run</p><pre><code><div class="highlight"><span></span>publish deploy
</div></code></pre><p>Head over to your repository, refresh and make sure your files are there.</p><h1>ü•Å Setup GitHub Pages</h1><p>Open your repository settings, scroll down to the GitHub Pages section and select the master branch. Don't forget to click the Save button.</p><img src="https://paraside.in/images/4/Screenshot_2020-08-11_at_15.28.14.png" alt="/images/4/Screenshot<em>2020-08-11</em>at_15.28.14.png"/><p>Once you're done, it should give your the address to your website.</p><img src="https://paraside.in/images/4/Screenshot_2020-08-11_at_15.29.07.png" alt="/images/4/Screenshot<em>2020-08-11</em>at_15.29.07.png"/><p>And you're done! Unless you want to use a custom domain name, which can be set in the same settings panel.</p><h1>üçí Bonus: Deploying from Xcode</h1><p>Instead of deploy using the command line with <code>publish deploy</code>, you can deploy straight from Xcode.</p><p>First, create a New Scheme, we'll call it <code>Deploy MyWebsite</code>. Click on it to reopen the same menu and select "Edit Scheme‚Ä¶".</p><img src="https://paraside.in/images/4/Screenshot_2020-08-11_at_22.21.08.png" alt="/images/4/Screenshot<em>2020-08-11</em>at_22.21.08.png"/><p>Select Run and in the Arguments Passed On Lauch, add <code>--deploy</code> without space.</p><img src="https://paraside.in/images/4/Screenshot_2020-08-11_at_22.24.05.png" alt="/images/4/Screenshot<em>2020-08-11</em>at_22.24.05.png"/><p>Now anytime your Run your website with the scheme (Product &gt; Run command or ‚åò+R), it will deploy your site to GitHub.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://paraside.in/design+code/casperish</guid><title>Your Publish website with my Casperish theme in less than 5 min</title><description>A port of Ghost's Casper theme with Tailwind CSS for your Publish website.</description><link>https://paraside.in/design+code/casperish</link><pubDate>Thu, 13 Aug 2020 14:59:00 +0200</pubDate><content:encoded><![CDATA[<p>I ported Ghost's Casper theme (v2) so you don't have to: it's called CasperishTheme and is <a href="https://github.com/sowenjub/CasperishTheme">available on GitHub</a>. This post explains how to install and customize it. It uses TailwindCSS and is based on <a href="https://github.com/tailwindtoolbox/Ghostwind">Ghostwind</a> with a few tweaks, upgrades and adaptations.</p><p>I'll assume that you have Xcode and its Command Line Tools installed on your machine.</p><h1>What's included with this theme</h1><p>Porting the Casper theme was not only about mimicking its CSS but also about adopting its features while staying within what Publish can do (quite a lot with the help of some plugins).</p><p>So this theme includes:</p><ul><li>Support for both Publish sections and pages (see "Organising your articles" at the end)</li><li>Support for subfolder hosting (compatible with GitHub Pages or /blog path of an existing landing page)</li><li>Icons for 5 social profiles: Dev.to, GitHub, LinkedIn, Stack Overflow, Twitter</li><li>Reading time, shown at the bottom of articles cards</li><li>Cover images for each article</li><li>Beautiful typographic defaults for your posts thanks to TailwindCSS typography plugin</li><li>A newsletter form (because why not?)</li><li>Syntax Highlighting with a Monokai theme because if you're considering Publish it's likely you will blog about code one day or the other</li></ul><h1>‚¨áÔ∏è Install Publish</h1><pre><code><div class="highlight"><span></span>git clone https://github.com/JohnSundell/Publish.git
<span class="nb">cd</span> Publish
make
</div></code></pre><h1>‚ú® Create your website</h1><p>Let's get out of /Publish and create your website source next to it. We'll call it <code>MyWebsite</code>.</p><pre><code><div class="highlight"><span></span><span class="nb">cd</span> ..
mkdir MyWebsite
<span class="nb">cd</span> MyWebsite
publish new
</div></code></pre><h1>üëª Install the CasperishTheme</h1><p>Open Xcode</p><pre><code><div class="highlight"><span></span>open Package.swift
</div></code></pre><p>Locate Package.swift manifest (it should be the first file) add the theme as a dependency.</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">PackageDescription</span>

<span class="kd">let</span> <span class="nv">package</span> <span class="p">=</span> <span class="n">Package</span><span class="p">(</span>
    <span class="n">name</span><span class="p">:</span> <span class="s">&quot;MyWebsite&quot;</span><span class="p">,</span>
    <span class="n">products</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">.</span><span class="n">executable</span><span class="p">(</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">&quot;MyWebsite&quot;</span><span class="p">,</span>
            <span class="n">targets</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;MyWebsite&quot;</span><span class="p">]</span>
        <span class="p">)</span>
    <span class="p">],</span>
    <span class="n">dependencies</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">.</span><span class="n">package</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;Publish&quot;</span><span class="p">,</span> <span class="n">url</span><span class="p">:</span> <span class="s">&quot;https://github.com/johnsundell/publish.git&quot;</span><span class="p">,</span> <span class="n">from</span><span class="p">:</span> <span class="s">&quot;0.7.0&quot;</span><span class="p">),</span>
        <span class="p">.</span><span class="n">package</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;CasperishTheme&quot;</span><span class="p">,</span> <span class="n">url</span><span class="p">:</span> <span class="s">&quot;https://github.com/sowenjub/CasperishTheme.git&quot;</span><span class="p">,</span> <span class="p">.</span><span class="n">branch</span><span class="p">(</span><span class="s">&quot;master&quot;</span><span class="p">)),</span>
    <span class="p">],</span>
    <span class="n">targets</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">.</span><span class="n">target</span><span class="p">(</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">&quot;MyWebsite&quot;</span><span class="p">,</span>
            <span class="n">dependencies</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;Publish&quot;</span><span class="p">,</span> <span class="s">&quot;CasperishTheme&quot;</span><span class="p">]</span>
        <span class="p">)</span>
    <span class="p">]</span>
<span class="p">)</span>
</div></code></pre><p>Note: ideally, instead of using the master branch, we would use versioning. But we can't do that at the moment because of the syntax highlighting library, so in the meantime, we're using the master branch.</p><h1>üßë‚Äçüé® Setup your website</h1><p>Open <code>MyWebsite/Sources/main.swift</code> and customize it using the example below. The numbered comments pinpoint the changes required (more explanation below)</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>
<span class="kd">import</span> <span class="nc">Publish</span>
<span class="kd">import</span> <span class="nc">Plot</span>
<span class="kd">import</span> <span class="nc">CasperishTheme</span> <span class="c1">// 1</span>

<span class="c1">// This type acts as the configuration for your website.</span>
<span class="kd">struct</span> <span class="nc">MyWebsite</span><span class="p">:</span> <span class="n">Website</span><span class="p">,</span> <span class="n">CasperishWebsite</span> <span class="p">{</span> <span class="c1">// 2</span>
    <span class="kd">enum</span> <span class="nc">SectionID</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">WebsiteSectionID</span> <span class="p">{</span>
        <span class="c1">// Add the sections that you want your website to contain here:</span>
        <span class="k">case</span> <span class="n">posts</span>
    <span class="p">}</span>

    <span class="kd">struct</span> <span class="nc">ItemMetadata</span><span class="p">:</span> <span class="n">WebsiteItemMetadata</span><span class="p">,</span> <span class="n">CasperishWebsiteItemMetadata</span> <span class="p">{</span> <span class="c1">// 3</span>
        <span class="c1">// Add any site-specific metadata that you want to use here.</span>
        <span class="kd">var</span> <span class="nv">cover</span><span class="p">:</span> <span class="nb">String</span><span class="p">?</span> <span class="c1">// 3 bis</span>
    <span class="p">}</span>

    <span class="c1">// Update these properties to configure your website:</span>
    <span class="kd">var</span> <span class="nv">url</span> <span class="p">=</span> <span class="n">URL</span><span class="p">(</span><span class="n">string</span><span class="p">:</span> <span class="s">&quot;https://your-website-url.com&quot;</span><span class="p">)</span><span class="o">!</span>
    <span class="kd">var</span> <span class="nv">name</span> <span class="p">=</span> <span class="s">&quot;MyWebsite&quot;</span>
    <span class="kd">var</span> <span class="nv">description</span> <span class="p">=</span> <span class="s">&quot;A description of MyWebsite&quot;</span>
    <span class="kd">var</span> <span class="nv">language</span><span class="p">:</span> <span class="n">Language</span> <span class="p">{</span> <span class="p">.</span><span class="n">english</span> <span class="p">}</span>
    <span class="kd">var</span> <span class="nv">imagePath</span><span class="p">:</span> <span class="n">Path</span><span class="p">?</span> <span class="p">{</span> <span class="kc">nil</span> <span class="p">}</span>
    
    <span class="c1">// 4</span>
    <span class="c1">// Update these properties to configure your casperish-website:</span>
    <span class="kd">var</span> <span class="nv">rootPathString</span> <span class="p">=</span> <span class="s">&quot;/&quot;</span>
    <span class="kd">var</span> <span class="nv">headerColor</span> <span class="p">=</span> <span class="s">&quot;#424242&quot;</span>
    <span class="kd">var</span> <span class="nv">cover</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
    <span class="kd">var</span> <span class="nv">author</span> <span class="p">=</span> <span class="s">&quot;Arnaud Joubay&quot;</span>
    <span class="kd">var</span> <span class="nv">avatar</span> <span class="p">=</span> <span class="s">&quot;http://i.pravatar.cc/300&quot;</span>
    <span class="kd">var</span> <span class="nv">bio</span> <span class="p">=</span> <span class="s">&quot;Swift &amp; Rails Indie Maker&quot;</span>
    <span class="kd">var</span> <span class="nv">icon</span> <span class="p">=</span> <span class="s">&quot;üèù&quot;</span>
    <span class="kd">var</span> <span class="nv">newsletterAction</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
    <span class="kd">var</span> <span class="nv">contacts</span><span class="p">:</span> <span class="p">[(</span><span class="n">ContactPoint</span><span class="p">,</span> <span class="nb">String</span><span class="p">)]</span> <span class="p">{</span> <span class="p">[</span>
        <span class="p">(.</span><span class="n">twitter</span><span class="p">,</span> <span class="s">&quot;sowenjub&quot;</span><span class="p">),</span>
        <span class="p">(.</span><span class="n">dev</span><span class="p">,</span> <span class="s">&quot;sowenjub&quot;</span><span class="p">),</span>
        <span class="p">(.</span><span class="n">linkedIn</span><span class="p">,</span> <span class="s">&quot;arnaudjoubay&quot;</span><span class="p">),</span>
        <span class="p">(.</span><span class="n">gitHub</span><span class="p">,</span> <span class="s">&quot;sowenjub&quot;</span><span class="p">),</span>
        <span class="p">(.</span><span class="n">stackoverflow</span><span class="p">,</span> <span class="s">&quot;229688&quot;</span><span class="p">),</span>
    <span class="p">]}</span>
<span class="p">}</span>

<span class="c1">// This will generate your website using the built-in Foundation theme:</span>
<span class="k">try</span> <span class="n">MyWebsite</span><span class="p">().</span><span class="n">publish</span><span class="p">(</span>
     <span class="n">withTheme</span><span class="p">:</span> <span class="p">.</span><span class="n">casperish</span><span class="p">,</span>
     <span class="n">additionalSteps</span><span class="p">:</span> <span class="p">[</span>
         <span class="p">.</span><span class="n">installPlugin</span><span class="p">(.</span><span class="n">readingTime</span><span class="p">()),</span>
         <span class="p">.</span><span class="n">installPlugin</span><span class="p">(.</span><span class="n">pygments</span><span class="p">()),</span>
     <span class="p">],</span>
     <span class="n">plugins</span><span class="p">:</span> <span class="p">[.</span><span class="n">pygments</span><span class="p">()]</span>
 <span class="p">)</span>  <span class="c1">// 5</span>
</div></code></pre><ol><li>Well, you need the CasperishTheme package obviously</li><li>Your Website must adopt the <code>CasperishWebsite</code> protocol, which enables theme-specific configurations (see 4.)</li><li>Your ItemMetadata must adopt the <code>CasperishWebsiteItemMetadata</code>, allowing you to add cover photos to each of your posts (which are items in the Publish jargon). So we also need to add the line <code>var cover: String?</code> inside.</li><li>This is where you can really make this theme your own:<ul><li><code>rootPathString</code> this allows you to publish the website in a subfolder, such as on GitHub Pages without a custom domain name. Leave it to <code>"/"</code> if your site will leave at the root domain</li><li><code>headerColor</code> hexadecimal code for the header's background-color. The cover image will hide it if you use one.</li><li><code>cover</code> optional path to the cover image. Leave blank (<code>""</code>) if you want to use the <code>headerColor</code> instead. If you have a cover.jpg image, the path should be <code>"/cover.jpg"</code> if your image is at the root of your <code>/Resources</code> folder (don't forget the / or it won't work on subpages).</li><li><code>author</code> and <code>bio</code> are displayed just above the footer</li><li><code>avatar</code> is the path to your profile picture, displayed for each post. The path should be <code>"/my avatar.jpg"</code> if your image is at the root of your <code>/Resources</code> folder.</li><li><code>icon</code> can be an emoji or any short text suitable to be the icon in the navigation bar on mobile</li><li>- <code>newsletterAction</code> leave blank (<code>""</code>) if you want to hide the newsletter, otherwise replace with the target URL</li><li><code>contacts</code> is an array of nicknames used to display links to your web profiles in the header (on desktop). For now, it only supports Twitter, Dev.to, LinkedIn, Github and Stack Overflow. 5. To generate your website you need to include the 2 plugins that ship with the theme</li></ul></li></ol><h1>‚å®Ô∏è Edit your first post</h1><p>Open <code>Content/posts/first-post.md</code> and write your first post!</p><h2>Example of first post</h2><pre><code><div class="highlight"><span></span>---
title: My first post
cover: /first_post.jpg
date: 2020-08-04 00:46
description: A description of my first post.
tags: first, article
---
<span class="gh">#</span> My first post&#39;s content title

My first post&#39;s text.
</div></code></pre><p>If you want to get up and running fast, you can cheat and replace <code>/first_post.jpg</code> with <a href="https://source.unsplash.com/collection/1118905/"><code>https://source.unsplash.com/collection/1118905/</code></a> or even remove the line entirely and your post won't have a cover.</p><h1>üöÄ Run your website</h1><p>You're done! To see the result, just run the following command from <code>/MyWebsite</code></p><pre><code><div class="highlight"><span></span>publish run
</div></code></pre><p>Now open your browser and enjoy the result.</p><p>If you use this as your theme, ping me and I'll list your blog to the <a href="https://github.com/sowenjub/CasperishTheme">CasperishTheme repository</a>. ‚úåÔ∏è</p><h1>üçª Bonus: things to know</h1><h3>Posts cover images</h3><p>The theme allows posts to have cover images, you just have to set it in your front matter.</p><p>So if you want to use <code>/Resources/first_post.jpg</code> as you cover for a post, add <code>cover: /first_post.jpg</code> like below:</p><pre><code><div class="highlight"><span></span>---
title: My first post
cover: /first_post.jpg
date: 2020-08-04 00:46
description: A description of my first post.
tags: life, anew
---
<span class="gh">#</span> My first post

My first post&#39;s text.
</div></code></pre><p>And if you don't want a cover, just remove the cover line!</p><h3>Title</h3><p>Publish is smart: it will guess the title front your post content. But this means your title will appear twice: once above the cover image, and once below.</p><p>Instead, you should set it in your front matter (as is done is the example above).</p><h3>Organising your articles</h3><p>In order to organize your content, you can play two variables:</p><ul><li>your categories (displayed in the menu, declared in your <code>main.swift</code> as SectionID)</li></ul><ul><li>your tags (displayed above each post, declared in each post's front matter)</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://paraside.in/design+code/emoji-picker-controller-with-stimulus-js</guid><title>Emoji picker controller with StimulusJS and Emoji Button</title><description>Adding an emoji picker to a Rails app</description><link>https://paraside.in/design+code/emoji-picker-controller-with-stimulus-js</link><pubDate>Wed, 15 Jul 2020 22:01:00 +0200</pubDate><content:encoded><![CDATA[<p>I needed an emoji picker for my latest Rails app and found <a href="https://github.com/joeattardi/emoji-button">Emoji Button</a> by @joeattardi that he introduced <a href="https://dev.to/joeattardi/emoji-button-a-vanilla-javascript-emoji-picker-1lf9">here</a>.</p><img src="https://dev-to-uploads.s3.amazonaws.com/i/0rn1pcp9tlk73nzrnuki.png" alt="Alt Text"/><p>Since he already did the heavy-lifting required to provide a vanilla JavaScript emoji picker component, I just needed to add it to my app and create a Stimulus controller. And here's how to do it for yours.</p><p>I'll assume you already have <a href="https://stimulusjs.org">StimulusJS</a> installed. From there, it's only a couple of steps.</p><p>First, open your Terminal and add the emoji-button package.</p><pre><code><div class="highlight"><span></span>yarn add @joeattardi/emoji-button
</div></code></pre><p>Then, create a <code>app/javascript/controllers/emoji_picker_controller.js</code> with this code inside</p><pre><code><div class="highlight"><span></span><span class="n">import</span> <span class="p">{</span> <span class="no">Controller</span> <span class="p">}</span> <span class="n">from</span> <span class="s2">&quot;stimulus&quot;</span>
<span class="n">import</span> <span class="no">EmojiButton</span> <span class="n">from</span> <span class="s1">&#39;@joeattardi/emoji-button&#39;</span>

<span class="n">export</span> <span class="n">default</span> <span class="k">class</span> <span class="n">extends</span> <span class="no">Controller</span> <span class="p">{</span>
  <span class="n">static</span> <span class="n">targets</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;button&quot;</span><span class="p">,</span> <span class="s2">&quot;input&quot;</span> <span class="o">]</span>

  <span class="n">connect</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">this</span><span class="o">.</span><span class="n">picker</span> <span class="o">=</span> <span class="kp">new</span> <span class="no">EmojiButton</span><span class="p">()</span>
    <span class="n">this</span><span class="o">.</span><span class="n">picker</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;emoji&#39;</span><span class="p">,</span> <span class="n">emoji</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="n">this</span><span class="o">.</span><span class="n">buttonTarget</span><span class="o">.</span><span class="n">innerHTML</span> <span class="o">=</span> <span class="n">emoji</span>
      <span class="n">this</span><span class="o">.</span><span class="n">inputTarget</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">emoji</span>
    <span class="p">})</span>
  <span class="p">}</span>

  <span class="n">toggle</span><span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">event</span><span class="o">.</span><span class="n">preventDefault</span><span class="p">()</span>
    <span class="n">this</span><span class="o">.</span><span class="n">picker</span><span class="o">.</span><span class="n">togglePicker</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">target</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>And now, if you have a <code>Post</code> model with an <code>emoji</code> attribute, you can do this in your form (the syntax below uses Slim instead of ERB):</p><pre><code><div class="highlight"><span></span><span class="o">=</span> <span class="n">form_for</span> <span class="n">post</span><span class="p">,</span> <span class="ss">url</span><span class="p">:</span> <span class="n">post_path</span><span class="p">(</span><span class="n">post</span><span class="p">),</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">controller</span><span class="p">:</span> <span class="s2">&quot;emoji-picker&quot;</span> <span class="p">}</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
  <span class="n">button</span> <span class="n">data</span><span class="o">-</span><span class="n">action</span><span class="o">=</span><span class="s2">&quot;emoji-picker#toggle&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">target</span><span class="o">=</span><span class="s2">&quot;emoji-picker.button&quot;</span>
    <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">emoji</span><span class="o">.</span><span class="n">presence</span> <span class="o">||</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:i</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;fad fa-smile text-gray-400&quot;</span><span class="p">)</span>
    <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">hidden_field</span> <span class="ss">:emoji</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">target</span><span class="p">:</span> <span class="s2">&quot;emoji-picker.input&quot;</span> <span class="p">}</span>
</div></code></pre><p>The <code>content_tag(:i, nil, class: "fad fa-smile text-gray-400")</code> bit uses <a href="https://fontawesome.com">FontAwesome</a> to show a default gray emoji when there is none.</p><p>And that's all there is to it. Anytime you click the button, the picker will be toggled, and if you select an emoji, both the button and the hidden form input will be updated.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://paraside.in/design+code/required-form-label-with-rails-tailwindcss</guid><title>Rails+TailwindCSS: adding "required" to form labels (and how to find the solution by yourself)</title><description>This post addresses a simple need: adding a "required" text next to any form field label that is‚Ä¶ required.</description><link>https://paraside.in/design+code/required-form-label-with-rails-tailwindcss</link><pubDate>Fri, 10 Jul 2020 22:01:00 +0200</pubDate><content:encoded><![CDATA[<p>This post addresses a simple need: adding a "required" text next to any form field label that is‚Ä¶ required.</p><p>But I wanted a solution: <em> using only TailwindCSS/TailwindUI existing classes </em> that can be reused easily <em> internationalization friendly (because we're using a word - required - and not the "</em>" sign as you often see) <em> that doesn't reinvent the wheel in some way </em> that looks like this</p><img src="https://dev-to-uploads.s3.amazonaws.com/i/4isnogc6vypl829kl0k1.png" alt="Alt Text"/><h1>For the coder in a hurry, my solution</h1><p>The gist of it is <code>label_builder.translation</code>.</p><pre><code><div class="highlight"><span></span><span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;block text-xxs uppercase text-gray-500&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">label_builder</span><span class="o">|</span>
  <span class="p">=</span> <span class="n">label_builder</span><span class="o">.</span><span class="n">translation</span>
  <span class="nt">span</span><span class="nc">.ml-2.normal-case.text-orange-400.text-xxs.font-semibold</span><span class="p">=</span> <span class="n">t</span><span class="p">(</span><span class="s2">&quot;required&quot;</span><span class="p">)</span>
  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">email_field</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">autocomplete</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;form-input mt-1 block w-full text-field focus:shadow-outline focus:border-green-300&quot;</span><span class="p">,</span> <span class="ss">placeholder</span><span class="p">:</span> <span class="s2">&quot;richard@piedpiper.com&quot;</span>
</div></code></pre><p>Note: I use the <a href="https://github.com/slim-template/slim">Slim</a> template language instead of ERB; it's easier to read so I trust that even if you've never heard of it you won't be lost.</p><h1>For the curious mind, how I got there and why</h1><p><em>FAIR WARNING: the rest is not your typical technical article. You already have the solution above, the rest is about how I found the solution. So it's more a story than a guide.</em></p><p>Here I was setting up a simple profile form, adding the proper <code>required: true</code> attributes and looking at it when I realized: <strong>how the hell would a user know which fields are required and which aren't?</strong></p><p>Like anyone, anytime I see a form, my mind looks for the easy way out and tries to figure out how to hit that submit button as quickly as possible. This bland form triggered my fill or flight response and I knew I had to do something about it.</p><h2>Starting point</h2><p>With a bit of TailwindCSS, here is what it was looking like.</p><img src="https://dev-to-uploads.s3.amazonaws.com/i/1eyy0fn26yk5ozi1knph.png" alt="Alt Text"/><p>and the code</p><pre><code><div class="highlight"><span></span><span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;block text-xxs uppercase text-gray-500&quot;</span>
<span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">email_field</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">autocomplete</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;form-input mt-1 block w-full text-field focus:shadow-outline focus:border-green-300&quot;</span><span class="p">,</span> <span class="ss">placeholder</span><span class="p">:</span> <span class="s2">&quot;richard@piedpiper.com&quot;</span>
</div></code></pre><p>It's as basic as it gets: a label and an email_field with some classes. I will skip the TailwindCSS explanations, just know that "form-input" comes from a <a href="https://tailwindcss-custom-forms.netlify.app">plugin</a>.</p><p>Goal check:</p><ul><li>‚úÖ using only TailwindCSS/TailwindUI existing classes</li><li>‚ùå that can be reused easily</li><li>‚ùå internationalization friendly</li><li>‚ùå that doesn't reinvent the wheel in some way</li><li>‚ùå that looks like the cover image</li></ul><h2>Approach n¬∞1: Add a "*" after the email</h2><p>Often, forms signal that a field is required by appending an asterisk to the label title, which can be done with a bit of CSS.</p><pre><code><div class="highlight"><span></span>  <span class="p">.</span><span class="nc">required</span><span class="p">:</span><span class="nd">after</span> <span class="p">{</span>
    <span class="k">content</span><span class="p">:</span><span class="s2">&quot; *&quot;</span><span class="p">;</span>
  <span class="p">}</span>
</div></code></pre><p>I went to the <a href="https://tailwindcss.com/docs/installation">TailwindCSS docs</a> and couldn't find anything ready-made to handle this. Sure, I could add it to my stylesheet files, but I already had another idea in mind. I played a little bit with <a href="https://basecamp.com">Basecamp</a> recently as I watched the <a href="https://www.youtube.com/playlist?list=PL9wALaIpe0Py6E_oHCgTrD6FvFETwJLlx">On Writing Software (well?)</a> videos by <a href="http://twitter.com/dhh">DHH</a>. And it reminded me that using the word "required" instead of a simple "*" sign is great to improve clarity.</p><h2>Approach n¬∞2: Appeal to humanity</h2><p>This confusing title is a bad pun inspired the method we'll be using in this approach: <code>Model.human_attribute_name</code>.</p><p>Since <code>label</code> can take a block to render, it's easy to come up with a first solution.</p><p>So I went from</p><pre><code><div class="highlight"><span></span><span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;block text-xxs uppercase text-gray-500&quot;</span>
</div></code></pre><p>to</p><pre><code><div class="highlight"><span></span><span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;block text-xxs uppercase text-gray-500&quot;</span> <span class="k">do</span>
  | Email
  <span class="nt">span</span><span class="nc">.ml-2.normal-case.text-orange-400.text-xxs.font-semibold</span> required
</div></code></pre><p>OK. It looks like the final result, but <strong>we're not quite there yet, because both "Email" and "required" are hardcoded</strong>.</p><p>Goal check:</p><ul><li>‚úÖ using only TailwindCSS/TailwindUI existing classes</li><li>‚ùå that can be reused easily</li><li>‚ùå internationalization friendly</li><li>‚ùå that doesn't reinvent the wheel in some way</li><li>‚úÖ that looks like the cover image</li></ul><p>The "required" text doesn't need much talking about. We just have to replace it with <code>= t("required")</code> and add a translation somewhere, probably in <code>config/locals/en.yml</code> since it will be pretty generic.</p><pre><code><div class="highlight"><span></span><span class="n">en</span><span class="p">:</span>
  <span class="kr">required</span><span class="p">:</span> <span class="kr">required</span>
</div></code></pre><p>But what about the email? I needed a solution that would be a bit more generic. The <a href="https://guides.rubyonrails.org/i18n.html#translations-for-active-record-models">standard way to look up translations</a> for any attribute is <code>Model.human_attribute_name(:attribute)</code>, so I did just that.</p><pre><code><div class="highlight"><span></span><span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;block text-xxs uppercase text-gray-500&quot;</span> <span class="k">do</span>
  <span class="cp">/ üëç Not horrible</span>
  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">c</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span>
  <span class="nt">span</span><span class="nc">.ml-2.normal-case.text-orange-400.text-xxs.font-semibold</span><span class="p">=</span> <span class="n">t</span><span class="p">(</span><span class="s2">&quot;required&quot;</span><span class="p">)</span>
  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">email_field</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">autocomplete</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;form-input mt-1 block w-full text-field focus:shadow-outline focus:border-green-300&quot;</span><span class="p">,</span> <span class="ss">placeholder</span><span class="p">:</span> <span class="s2">&quot;richard@piedpiper.com&quot;</span>
</div></code></pre><p>At this point, I am relying on common techniques. A little bit unsatisfying but it gets the job done.</p><p>What did I find unsatisfying, you may wonder?</p><p>Generally speaking, rails take care of many intricacies you might not think of. When you're replicating part of a method (in our case the part that takes a symbol - :email - and turns it into text - Email -), it's highly likely you're forgetting edge cases or oversimplifying. It's like using a steering wheel versus ropes tied to the wheels. Sure, it works, you have a direct grip on things, but there's a reason we built an intermediary thingy.</p><p>In particular, by doing our own thing instead of relying on rails' wisdom, we're missing out on lazy lookup cleverness. And in our case, by using <code>Model.human_attribute_name</code> directly, we are reinventing the wheel.</p><p>Goal check:</p><ul><li>‚úÖ using only TailwindCSS/TailwindUI existing classes</li><li>‚úÖ that can be reused easily</li><li>‚úÖ internationalization friendly</li><li>‚ùå that doesn't reinvent the wheel in some way</li><li>‚úÖ that looks like the cover image</li></ul><h2>Final approach</h2><p>Where to go from there? I knew that the <code>label</code> helper was handling the translation at some level, and I wanted to know if you could tap into it.</p><p>There was two way to deal with this. The easy way, and the way I did it because‚Ä¶ I got carried away.</p><h3>Let's start with the laborious (but still interesting) way</h3><p>The easiest way to know how the <code>label</code> helper handles the translation is to look at the source code Using <a href="https://kapeli.com/dash">Dash</a>, I opened the rails source code and found <a href="https://github.com/rails/rails/blob/b738f1930f3c82f51741ef7241c1fee691d7deb2/actionview/lib/action_view/helpers/form_helper.rb#L2252">this</a></p><pre><code><div class="highlight"><span></span><span class="k">def</span> <span class="nf">label</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{},</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="vi">@template</span><span class="o">.</span><span class="n">label</span><span class="p">(</span><span class="vi">@object_name</span><span class="p">,</span> <span class="nb">method</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">objectify_options</span><span class="p">(</span><span class="n">options</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
<span class="k">end</span>
</div></code></pre><p>I clicked the label call and looked at the definitions found by Github's code navigation (I only discovered recently that Github lets you do that, so I'm mentioning it here in case you didn't know about).</p><img src="https://dev-to-uploads.s3.amazonaws.com/i/g5dzkaz8ga9tsg0misky.png" alt="Alt Text"/><p>The method's signature of the <a href="https://github.com/rails/rails/blob/a0e0f0263902896a7aacf703bcab35bee16bdaf8/actionview/lib/action_view/helpers/form_helper.rb#L1118">first row</a> seems to match the one used before, so I followed it and found this, which doesn't do much:</p><pre><code><div class="highlight"><span></span><span class="k">def</span> <span class="nf">label</span><span class="p">(</span><span class="n">object_name</span><span class="p">,</span> <span class="nb">method</span><span class="p">,</span> <span class="n">content_or_options</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="no">Tags</span><span class="o">::</span><span class="no">Label</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">object_name</span><span class="p">,</span> <span class="nb">method</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="n">content_or_options</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
<span class="k">end</span>
</div></code></pre><p>From there, I followed <code>Tags::Label</code> and finally arrived on the <a href="https://github.com/rails/rails/blob/a0e0f0263902896a7aacf703bcab35bee16bdaf8/actionview/lib/action_view/helpers/tags/label.rb#L6">LabelBuilder</a> Here I started to skim through the code, but I didn't have to go far because, at the very top, I saw a promising <code>def translation</code>.</p><p>I went back to the code, added a parameter to the block call that I felt should be named label_builder, and called its translation method.</p><pre><code><div class="highlight"><span></span><span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;block text-xxs uppercase text-gray-500&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">label_builder</span><span class="o">|</span>
  <span class="cp">/ ‚ú® True magic</span>
  <span class="p">=</span> <span class="n">label_builder</span><span class="o">.</span><span class="n">translation</span>
  <span class="nt">span</span><span class="nc">.ml-2.normal-case.text-orange-400.text-xxs.font-semibold</span><span class="p">=</span> <span class="n">t</span><span class="p">(</span><span class="s2">&quot;required&quot;</span><span class="p">)</span>
  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">email_field</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">autocomplete</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;form-input mt-1 block w-full text-field focus:shadow-outline focus:border-green-300&quot;</span><span class="p">,</span> <span class="ss">placeholder</span><span class="p">:</span> <span class="s2">&quot;richard@piedpiper.com&quot;</span>
</div></code></pre><p>This translation is closer to the template engine than the previous solution.</p><h3>The easy way</h3><p>Before we go further, here is the easy way to find that same method in less time.</p><p>You just have to a) use the console</p><pre><code><div class="highlight"><span></span><span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;block text-xxs uppercase text-gray-500&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">label_builder</span><span class="o">|</span>
  <span class="p">-</span> <span class="n">console</span>
</div></code></pre><p>b) load the page in your browser, wait for the console to appear, and type <code>label_builder.methods</code> to return the list of the names of methods of our label_builder: <code>:translation</code> is the very first one.</p><img src="https://dev-to-uploads.s3.amazonaws.com/i/u22smpon0xpra2yqk1ml.png" alt="Alt Text"/><p>Why didn't I think of that? Force of habits mostly. I've found a lot of solutions recently by reading code so it was my first instinct. Also, I didn't think it would be that easy, ie that the <code>LabelBuilder</code> would just expose the translation. But I must admit that the prospect of reading code and learning a thing or two because of it was also appealing. I find that it's always worth my time.</p><h3>Why is it better and what did we learn?</h3><p>Remember when I told you that we were missing out on lazy lookup cleverness? You can reveal it using <a href="https://github.com/fphilipe/i18n-debug">i18n-debug</a>.</p><p>The previous solution using <code>human_attribute_name</code> looks for this key:</p><pre><code><div class="highlight"><span></span>en.activerecord.attributes.contact.email
</div></code></pre><p>Our new solution first looks for one specific to labels and only falls back on the model one if it's nil.</p><pre><code><div class="highlight"><span></span>en.helpers.label.contact.email
en.activerecord.attributes.contact.email
</div></code></pre><p>This is way more satisfying üòå and the end of the original article.</p><p>I wanted to not only share my solution but also the tools I use as well as a way to go beyond duck-taping (which to me is any approach up to - and including - the <code>human_attribute_name</code> approach).</p><p>At this point you know how to add a "required" text to form labels:</p><ul><li>‚úÖ using only TailwindCSS/TailwindUI existing classes</li><li>‚úÖ that can be reused easily</li><li>‚úÖ internationalization friendly</li><li>‚úÖ that doesn't reinvent the wheel in some way</li><li>‚úÖ that looks like the cover image</li></ul><h1>For the Stakhanovites, going further with a Form Builder</h1><p>I didn't plan to go that far initially, but I couldn't resist once I thought about it üò¨</p><p>If you're going to do that often, you'll probably want to start <a href="https://guides.rubyonrails.org/form_helpers.html#customizing-form-builders">customizing form builders</a> in order to make all of this even more reusable, write less code and get even closer to vanilla rails.</p><p>Indeed, with a form builder we can simply write something like this:</p><pre><code><div class="highlight"><span></span><span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;block text-xxs uppercase text-gray-500&quot;</span><span class="p">,</span> <span class="ss">required_class</span><span class="p">:</span> <span class="s2">&quot;ml-2 normal-case text-orange-400 text-xxs font-semibold&quot;</span>
<span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">email_field</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">autocomplete</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;form-input mt-1 block w-full text-field focus:shadow-outline focus:border-green-300&quot;</span><span class="p">,</span> <span class="ss">placeholder</span><span class="p">:</span> <span class="s2">&quot;richard@piedpiper.com&quot;</span>
</div></code></pre><p>If you compare it to our starting point, you'll see that there is only one difference: an extra <code>required_class</code>.</p><img src="https://dev-to-uploads.s3.amazonaws.com/i/j03a8ptbymo67f37whm2.png" alt="Alt Text"/><p>Now, this is üòé.</p><p>What would that form builder look like? Here's my take on this. It's the first form builder I write, so if you have more experienced and notice something weird please do tell.</p><pre><code><div class="highlight"><span></span><span class="c1"># app/form_builders/requiring_form_builder.rb</span>
<span class="k">class</span> <span class="nc">RequiringFormBuilder</span> <span class="o">&lt;</span> <span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">FormBuilder</span>
  <span class="k">def</span> <span class="nf">label</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{},</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="n">text_is_options</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
    <span class="n">required</span> <span class="o">=</span> <span class="n">text_is_options</span> <span class="p">?</span> <span class="n">text</span><span class="o">[</span><span class="ss">:required</span><span class="o">]</span> <span class="p">:</span> <span class="n">options</span><span class="o">[</span><span class="ss">:required</span><span class="o">]</span>
    <span class="k">if</span> <span class="n">required</span>
      <span class="n">required_class</span> <span class="o">=</span> <span class="n">text_is_options</span> <span class="p">?</span> <span class="n">text</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:required_class</span><span class="p">)</span> <span class="p">:</span> <span class="n">options</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:required_class</span><span class="p">)</span>
      <span class="k">super</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">label_builder</span><span class="o">|</span>
        <span class="vi">@template</span><span class="o">.</span><span class="n">concat</span> <span class="n">label_builder</span><span class="o">.</span><span class="n">translation</span>
        <span class="vi">@template</span><span class="o">.</span><span class="n">concat</span> <span class="vi">@template</span><span class="o">.</span><span class="n">content_tag</span><span class="p">(</span><span class="ss">:span</span><span class="p">,</span> <span class="no">I18n</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;required&quot;</span><span class="p">,</span> <span class="ss">scope</span><span class="p">:</span> <span class="ss">:helpers</span><span class="p">),</span> <span class="ss">class</span><span class="p">:</span> <span class="n">required_class</span><span class="p">)</span>
        <span class="vi">@template</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="vi">@template</span><span class="o">.</span><span class="n">capture</span><span class="p">(</span><span class="n">label_builder</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">))</span> <span class="k">if</span> <span class="nb">block_given?</span>
      <span class="k">end</span>
    <span class="k">else</span>
      <span class="k">super</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</div></code></pre><p>There are two other things required for this to work.</p><p>First, the form_with declaration must declare the builder:</p><pre><code><div class="highlight"><span></span><span class="p">=</span> <span class="n">form_with</span> <span class="ss">model</span><span class="p">:</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">builder</span><span class="p">:</span> <span class="no">RequiringFormBuilder</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</div></code></pre><p>Second, you might have noticed that I use <code>I18n.t("required", scope: :helpers)</code> and not <code>I18n.t("required")</code> as we did before because it seems more appropriate to put that under the <code>helpers</code> namespace (in my case in a file called <code>config/locals/helpers/en.yml</code>). So you need to move that in the proper translation file, or at the minimum to change</p><pre><code><div class="highlight"><span></span><span class="nt">en</span><span class="p">:</span>
  <span class="nt">required</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">required</span>
</div></code></pre><p>into</p><pre><code><div class="highlight"><span></span><span class="nt">en</span><span class="p">:</span>
  <span class="nt">helpers</span><span class="p">:</span>
    <span class="nt">required</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">required</span>
</div></code></pre><p>I won't go into the details, but I'll point to two parts in the rails code that helped me write this code. <em> https://github.com/rails/rails/blob/a0e0f0263902896a7aacf703bcab35bee16bdaf8/actionview/lib/action</em>view/helpers/tags/label.rb#L30 because text can, in fact, be the options <em> https://github.com/rails/rails/blob/477fae3eb3d3b3bfdbe28586fecb8578c0be4721/actionview/lib/action</em>view/helpers/form_helper.rb#L1924 because we don't want to break block calling (<code>do |label_builder|</code>)</p><p>With this form builder, we can now simply add a <code>required_class</code> to any required label field.</p><p>If you enjoyed this article, you can follow me on Twitter <a href="https://twitter.com/sowenjub">@sowenjub</a>.</p>]]></content:encoded></item></channel></rss>