<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>üèù Living in Paraside</title><description>Paraside [p…õ.…π…ô.sa…™d] - A mind archipelago where dreams come true</description><link>https://sowenjub.me</link><language>en</language><lastBuildDate>Fri, 7 Aug 2020 23:24:25 +0200</lastBuildDate><pubDate>Fri, 7 Aug 2020 23:24:25 +0200</pubDate><ttl>250</ttl><atom:link href="https://sowenjub.me/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://sowenjub.me/posts/required-form-label-with-rails-tailwindcss</guid><title>Rails+TailwindCSS: adding "required" to form labels (and how to find the solution by yourself)</title><description>This post addresses a simple need: adding a "required" text next to any form field label that is‚Ä¶ required.</description><link>https://sowenjub.me/posts/required-form-label-with-rails-tailwindcss</link><pubDate>Fri, 10 Jul 2020 22:01:00 +0200</pubDate><content:encoded><![CDATA[<p>This post addresses a simple need: adding a "required" text next to any form field label that is‚Ä¶ required.</p><p>But I wanted a solution: <em> using only TailwindCSS/TailwindUI existing classes </em> that can be reused easily <em> internationalization friendly (because we're using a word - required - and not the "</em>" sign as you often see) <em> that doesn't reinvent the wheel in some way </em> that looks like this</p><img src="https://dev-to-uploads.s3.amazonaws.com/i/4isnogc6vypl829kl0k1.png" alt="Alt Text"/><h1>For the coder in a hurry, my solution</h1><p>The gist of it is <code>label_builder.translation</code>.</p><pre><code class="language-slim">= f.label :email, required: true, class: "block text-xxs uppercase text-gray-500" do |label_builder|
  = label_builder.translation
  span.ml-2.normal-case.text-orange-400.text-xxs.font-semibold= t("required")
  = f.email_field :email, autocomplete: false, required: true, class: "form-input mt-1 block w-full text-field focus:shadow-outline focus:border-green-300", placeholder: "richard@piedpiper.com"
</code></pre><p>Note: I use the <a href="https://github.com/slim-template/slim">Slim</a> template language instead of ERB; it's easier to read so I trust that even if you've never heard of it you won't be lost.</p><h1>For the curious mind, how I got there and why</h1><p><em>FAIR WARNING: the rest is not your typical technical article. You already have the solution above, the rest is about how I found the solution. So it's more a story than a guide.</em></p><p>Here I was setting up a simple profile form, adding the proper <code>required: true</code> attributes and looking at it when I realized: <strong>how the hell would a user know which fields are required and which aren't?</strong></p><p>Like anyone, anytime I see a form, my mind looks for the easy way out and tries to figure out how to hit that submit button as quickly as possible. This bland form triggered my fill or flight response and I knew I had to do something about it.</p><h2>Starting point</h2><p>With a bit of TailwindCSS, here is what it was looking like.</p><img src="https://dev-to-uploads.s3.amazonaws.com/i/1eyy0fn26yk5ozi1knph.png" alt="Alt Text"/><p>and the code</p><pre><code class="language-slim">= f.label :email, required: true, class: "block text-xxs uppercase text-gray-500"
= f.email_field :email, autocomplete: false, required: true, class: "form-input mt-1 block w-full text-field focus:shadow-outline focus:border-green-300", placeholder: "richard@piedpiper.com"
</code></pre><p>It's as basic as it gets: a label and an email_field with some classes. I will skip the TailwindCSS explanations, just know that "form-input" comes from a <a href="https://tailwindcss-custom-forms.netlify.app">plugin</a>.</p><p>Goal check: <em> ‚úÖ using only TailwindCSS/TailwindUI existing classes </em> ‚ùå that can be reused easily <em> ‚ùå internationalization friendly </em> ‚ùå that doesn't reinvent the wheel in some way * ‚ùå that looks like the cover image</p><h2>Approach n¬∞1: Add a "*" after the email</h2><p>Often, forms signal that a field is required by appending an asterisk to the label title, which can be done with a bit of CSS.</p><pre><code class="language-css">  .required:after {
    content:" *";
  }
</code></pre><p>I went to the <a href="https://tailwindcss.com/docs/installation">TailwindCSS docs</a> and couldn't find anything ready-made to handle this. Sure, I could add it to my stylesheet files, but I already had another idea in mind. I played a little bit with <a href="https://basecamp.com">Basecamp</a> recently as I watched the <a href="https://www.youtube.com/playlist?list=PL9wALaIpe0Py6E_oHCgTrD6FvFETwJLlx">On Writing Software (well?)</a> videos by <a href="http://twitter.com/dhh">DHH</a>. And it reminded me that using the word "required" instead of a simple "*" sign is great to improve clarity.</p><h2>Approach n¬∞2: Appeal to humanity</h2><p>This confusing title is a bad pun inspired the method we'll be using in this approach: <code>Model.human_attribute_name</code>.</p><p>Since <code>label</code> can take a block to render, it's easy to come up with a first solution.</p><p>So I went from</p><pre><code class="language-slim">= f.label :email, required: true, class: "block text-xxs uppercase text-gray-500"
</code></pre><p>to</p><pre><code class="language-slim">= f.label :email, required: true, class: "block text-xxs uppercase text-gray-500" do
  | Email
  span.ml-2.normal-case.text-orange-400.text-xxs.font-semibold required
</code></pre><p>OK. It looks like the final result, but <strong>we're not quite there yet, because both "Email" and "required" are hardcoded</strong>.</p><p>Goal check: <em> ‚úÖ using only TailwindCSS/TailwindUI existing classes </em> ‚ùå that can be reused easily <em> ‚ùå internationalization friendly </em> ‚ùå that doesn't reinvent the wheel in some way * ‚úÖ that looks like the cover image</p><p>The "required" text doesn't need much talking about. We just have to replace it with <code>= t("required")</code> and add a translation somewhere, probably in <code>config/locals/en.yml</code> since it will be pretty generic.</p><pre><code class="language-yml">en:
  required: required
</code></pre><p>But what about the email? I needed a solution that would be a bit more generic. The <a href="https://guides.rubyonrails.org/i18n.html#translations-for-active-record-models">standard way to look up translations</a> for any attribute is <code>Model.human_attribute_name(:attribute)</code>, so I did just that.</p><pre><code class="language-slim">= f.label :email, required: true, class: "block text-xxs uppercase text-gray-500" do
  / üëç Not horrible
  = f.object.class.c(:email)
  span.ml-2.normal-case.text-orange-400.text-xxs.font-semibold= t("required")
  = f.email_field :email, autocomplete: false, required: true, class: "form-input mt-1 block w-full text-field focus:shadow-outline focus:border-green-300", placeholder: "richard@piedpiper.com"
</code></pre><p>At this point, I am relying on common techniques. A little bit unsatisfying but it gets the job done.</p><p>What did I find unsatisfying, you may wonder?</p><p>Generally speaking, rails take care of many intricacies you might not think of. When you're replicating part of a method (in our case the part that takes a symbol - :email - and turns it into text - Email -), it's highly likely you're forgetting edge cases or oversimplifying. It's like using a steering wheel versus ropes tied to the wheels. Sure, it works, you have a direct grip on things, but there's a reason we built an intermediary thingy.</p><p>In particular, by doing our own thing instead of relying on rails' wisdom, we're missing out on lazy lookup cleverness. And in our case, by using <code>Model.human_attribute_name</code> directly, we are reinventing the wheel.</p><p>Goal check: <em> ‚úÖ using only TailwindCSS/TailwindUI existing classes </em> ‚úÖ that can be reused easily <em> ‚úÖ internationalization friendly </em> ‚ùå that doesn't reinvent the wheel in some way * ‚úÖ that looks like the cover image</p><h2>Final approach</h2><p>Where to go from there? I knew that the <code>label</code> helper was handling the translation at some level, and I wanted to know if you could tap into it.</p><p>There was two way to deal with this. The easy way, and the way I did it because‚Ä¶ I got carried away.</p><h3>Let's start with the laborious (but still interesting) way</h3><p>The easiest way to know how the <code>label</code> helper handles the translation is to look at the source code Using <a href="https://kapeli.com/dash">Dash</a>, I opened the rails source code and found <a href="https://github.com/rails/rails/blob/b738f1930f3c82f51741ef7241c1fee691d7deb2/actionview/lib/action_view/helpers/form_helper.rb#L2252">this</a></p><pre><code class="language-ruby">def label(method, text = nil, options = {}, &amp;block)
  @template.label(@object_name, method, text, objectify_options(options), &amp;block)
end
</code></pre><p>I clicked the label call and looked at the definitions found by Github's code navigation (I only discovered recently that Github lets you do that, so I'm mentioning it here in case you didn't know about).</p><img src="https://dev-to-uploads.s3.amazonaws.com/i/g5dzkaz8ga9tsg0misky.png" alt="Alt Text"/><p>The method's signature of the <a href="https://github.com/rails/rails/blob/a0e0f0263902896a7aacf703bcab35bee16bdaf8/actionview/lib/action_view/helpers/form_helper.rb#L1118">first row</a> seems to match the one used before, so I followed it and found this, which doesn't do much:</p><pre><code class="language-ruby">def label(object_name, method, content_or_options = nil, options = nil, &amp;block)
    Tags::Label.new(object_name, method, self, content_or_options, options).render(&amp;block)
end
</code></pre><p>From there, I followed <code>Tags::Label</code> and finally arrived on the <a href="https://github.com/rails/rails/blob/a0e0f0263902896a7aacf703bcab35bee16bdaf8/actionview/lib/action_view/helpers/tags/label.rb#L6">LabelBuilder</a> Here I started to skim through the code, but I didn't have to go far because, at the very top, I saw a promising <code>def translation</code>.</p><p>I went back to the code, added a parameter to the block call that I felt should be named label_builder, and called its translation method.</p><pre><code class="language-slim">= f.label :email, required: true, class: "block text-xxs uppercase text-gray-500" do |label_builder|
  / ‚ú® True magic
  = label_builder.translation
  span.ml-2.normal-case.text-orange-400.text-xxs.font-semibold= t("required")
  = f.email_field :email, autocomplete: false, required: true, class: "form-input mt-1 block w-full text-field focus:shadow-outline focus:border-green-300", placeholder: "richard@piedpiper.com"
</code></pre><p>This translation is closer to the template engine than the previous solution.</p><h3>The easy way</h3><p>Before we go further, here is the easy way to find that same method in less time.</p><p>You just have to a) use the console</p><pre><code class="language-slim">= f.label :email, required: true, class: "block text-xxs uppercase text-gray-500" do |label_builder|
  - console
</code></pre><p>b) load the page in your browser, wait for the console to appear, and type <code>label_builder.methods</code> to return the list of the names of methods of our label_builder: <code>:translation</code> is the very first one.</p><img src="https://dev-to-uploads.s3.amazonaws.com/i/u22smpon0xpra2yqk1ml.png" alt="Alt Text"/><p>Why didn't I think of that? Force of habits mostly. I've found a lot of solutions recently by reading code so it was my first instinct. Also, I didn't think it would be that easy, ie that the <code>LabelBuilder</code> would just expose the translation. But I must admit that the prospect of reading code and learning a thing or two because of it was also appealing. I find that it's always worth my time.</p><h3>Why is it better and what did we learn?</h3><p>Remember when I told you that we were missing out on lazy lookup cleverness? You can reveal it using <a href="https://github.com/fphilipe/i18n-debug">i18n-debug</a>.</p><p>The previous solution using <code>human_attribute_name</code> looks for this key:</p><pre><code class="language-bash">en.activerecord.attributes.contact.email
</code></pre><p>Our new solution first looks for one specific to labels and only falls back on the model one if it's nil.</p><pre><code class="language-bash">en.helpers.label.contact.email
en.activerecord.attributes.contact.email
</code></pre><p>This is way more satisfying üòå and the end of the original article.</p><p>I wanted to not only share my solution but also the tools I use as well as a way to go beyond duck-taping (which to me is any approach up to - and including - the <code>human_attribute_name</code> approach).</p><p>At this point you know how to add a "required" text to form labels: <em> ‚úÖ using only TailwindCSS/TailwindUI existing classes </em> ‚úÖ that can be reused easily <em> ‚úÖ internationalization friendly </em> ‚úÖ that doesn't reinvent the wheel in some way * ‚úÖ that looks like the cover image</p><h1>For the Stakhanovites, going further with a Form Builder</h1><p>I didn't plan to go that far initially, but I couldn't resist once I thought about it üò¨</p><p>If you're going to do that often, you'll probably want to start <a href="https://guides.rubyonrails.org/form_helpers.html#customizing-form-builders">customizing form builders</a> in order to make all of this even more reusable, write less code and get even closer to vanilla rails.</p><p>Indeed, with a form builder we can simply write something like this:</p><pre><code class="language-slim">= f.label :email, required: true, class: "block text-xxs uppercase text-gray-500", required_class: "ml-2 normal-case text-orange-400 text-xxs font-semibold"
= f.email_field :email, autocomplete: false, required: true, class: "form-input mt-1 block w-full text-field focus:shadow-outline focus:border-green-300", placeholder: "richard@piedpiper.com"
</code></pre><p>If you compare it to our starting point, you'll see that there is only one difference: an extra <code>required_class</code>.</p><img src="https://dev-to-uploads.s3.amazonaws.com/i/j03a8ptbymo67f37whm2.png" alt="Alt Text"/><p>Now, this is üòé.</p><p>What would that form builder look like? Here's my take on this. It's the first form builder I write, so if you have more experienced and notice something weird please do tell.</p><pre><code class="language-ruby"># app/form_builders/requiring_form_builder.rb
class RequiringFormBuilder &lt; ActionView::Helpers::FormBuilder
  def label(method, text = nil, options = {}, &amp;block)
    text_is_options = text.is_a?(Hash)
    required = text_is_options ? text[:required] : options[:required]
    if required
      required_class = text_is_options ? text.delete(:required_class) : options.delete(:required_class)
      super(method, text, options) do |label_builder|
        @template.concat label_builder.translation
        @template.concat @template.content_tag(:span, I18n.t("required", scope: :helpers), class: required_class)
        @template.concat(@template.capture(label_builder, &amp;block)) if block_given?
      end
    else
      super(method, text, options, &amp;block)
    end
  end
end
</code></pre><p>There are two other things required for this to work.</p><p>First, the form_with declaration must declare the builder:</p><pre><code class="language-slim">= form_with model: @user, builder: RequiringFormBuilder do |f|
</code></pre><p>Second, you might have noticed that I use <code>I18n.t("required", scope: :helpers)</code> and not <code>I18n.t("required")</code> as we did before because it seems more appropriate to put that under the <code>helpers</code> namespace (in my case in a file called <code>config/locals/helpers/en.yml</code>). So you need to move that in the proper translation file, or at the minimum to change</p><pre><code class="language-yaml">en:
  required: required
</code></pre><p>into</p><pre><code class="language-yaml">en:
  helpers:
    required: required
</code></pre><p>I won't go into the details, but I'll point to two parts in the rails code that helped me write this code. <em> https://github.com/rails/rails/blob/a0e0f0263902896a7aacf703bcab35bee16bdaf8/actionview/lib/action</em>view/helpers/tags/label.rb#L30 because text can, in fact, be the options <em> https://github.com/rails/rails/blob/477fae3eb3d3b3bfdbe28586fecb8578c0be4721/actionview/lib/action</em>view/helpers/form_helper.rb#L1924 because we don't want to break block calling (<code>do |label_builder|</code>)</p><p>With this form builder, we can now simply add a <code>required_class</code> to any required label field.</p><p>If you enjoyed this article, you can follow me on Twitter <a href="https://twitter.com/sowenjub">@sowenjub</a>.</p>]]></content:encoded></item></channel></rss>